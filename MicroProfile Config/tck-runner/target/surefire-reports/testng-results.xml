<?xml version="1.0" encoding="UTF-8"?>
<testng-results skipped="30" failed="1" total="34" passed="3">
  <reporter-output>
  </reporter-output>
  <suite name="microprofile-config-TCK" duration-ms="2194" started-at="2017-04-13T10:42:28Z" finished-at="2017-04-13T10:42:30Z">
    <groups>
    </groups>
    <test name="microprofile-config 1.0 TCK" duration-ms="2194" started-at="2017-04-13T10:42:28Z" finished-at="2017-04-13T10:42:30Z">
      <class name="org.eclipse.microprofile.config.tck.CDIPlainInjectionTest">
        <test-method status="FAIL" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.CDIPlainInjectionTest@57baeedf]" name="arquillianBeforeClass" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <exception class="org.jboss.weld.exceptions.DeploymentException">
            <message>
              <![CDATA[WELD-001408: Unsatisfied dependencies for type Integer with qualifiers @ConfigProperty
  at injection point [BackedAnnotatedField] @Inject @ConfigProperty private org.eclipse.microprofile.config.tck.CDIPlainInjectionTest$SimpleValuesBean.intProperty
  at org.eclipse.microprofile.config.tck.CDIPlainInjectionTest$SimpleValuesBean.intProperty(SimpleValuesBean.java:0)
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.jboss.weld.exceptions.DeploymentException: WELD-001408: Unsatisfied dependencies for type Integer with qualifiers @ConfigProperty
  at injection point [BackedAnnotatedField] @Inject @ConfigProperty private org.eclipse.microprofile.config.tck.CDIPlainInjectionTest$SimpleValuesBean.intProperty
  at org.eclipse.microprofile.config.tck.CDIPlainInjectionTest$SimpleValuesBean.intProperty(SimpleValuesBean.java:0)

	at org.jboss.weld.bootstrap.Validator.validateInjectionPointForDeploymentProblems(Validator.java:355)
	at org.jboss.weld.bootstrap.Validator.validateInjectionPoint(Validator.java:277)
	at org.jboss.weld.bootstrap.Validator.validateGeneralBean(Validator.java:130)
	at org.jboss.weld.bootstrap.Validator.validateRIBean(Validator.java:151)
	at org.jboss.weld.bootstrap.Validator.validateBean(Validator.java:494)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:64)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:55)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- org.jboss.weld.exceptions.DeploymentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.CDIPlainInjectionTest@57baeedf]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.CDIPlainInjectionTest@57baeedf]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.CDIPlainInjectionTest@57baeedf]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.CDIPlainInjectionTest.can_inject_dynamic_values_via_CDI_provider()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="can_inject_dynamic_values_via_CDI_provider()[pri:0, instance:org.eclipse.microprofile.config.tck.CDIPlainInjectionTest@57baeedf]" name="can_inject_dynamic_values_via_CDI_provider" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- can_inject_dynamic_values_via_CDI_provider -->
        <test-method status="SKIP" signature="can_inject_simple_values_when_defined()[pri:0, instance:org.eclipse.microprofile.config.tck.CDIPlainInjectionTest@57baeedf]" name="can_inject_simple_values_when_defined" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- can_inject_simple_values_when_defined -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.CDIPlainInjectionTest@57baeedf]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.CDIPlainInjectionTest.can_inject_simple_values_when_defined()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.CDIPlainInjectionTest@57baeedf]" name="arquillianAfterClass" is-config="true" duration-ms="6" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
      </class> <!-- org.eclipse.microprofile.config.tck.CDIPlainInjectionTest -->
      <class name="org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest">
        <test-method status="PASS" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest@1794d431]" name="arquillianBeforeClass" is-config="true" duration-ms="94" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="PASS" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest@1794d431]" name="arquillianBeforeTest" is-config="true" duration-ms="6" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest.testConfigSourceProvider()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="FAIL" signature="testConfigSourceProvider()[pri:0, instance:org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest@1794d431]" name="testConfigSourceProvider" duration-ms="13" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <exception class="java.lang.IllegalStateException">
            <message>
              <![CDATA[No ConfigProviderResolver implementation found!]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalStateException: No ConfigProviderResolver implementation found!
	at org.eclipse.microprofile.config.spi.ConfigProviderResolver.instance(ConfigProviderResolver.java:116)
	at org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest.testConfigSourceProvider(AutoDiscoveredConfigSourceTest.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:85)
	at org.testng.internal.MethodInvocationHelper$1.runTestMethod(MethodInvocationHelper.java:196)
	at org.jboss.arquillian.testng.Arquillian$2.invoke(Arquillian.java:173)
	at org.jboss.arquillian.container.test.impl.execution.LocalTestExecuter.execute(LocalTestExecuter.java:60)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:85)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:143)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
	at org.jboss.arquillian.core.impl.EventImpl.fire(EventImpl.java:67)
	at org.jboss.arquillian.container.test.impl.client.protocol.local.LocalContainerMethodExecutor.invoke(LocalContainerMethodExecutor.java:50)
	at org.jboss.arquillian.container.test.impl.execution.RemoteTestExecuter.execute(RemoteTestExecuter.java:109)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:85)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:143)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:114)
	at org.jboss.arquillian.core.impl.EventImpl.fire(EventImpl.java:67)
	at org.jboss.arquillian.container.test.impl.execution.ClientTestExecuter.execute(ClientTestExecuter.java:57)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
	at org.jboss.arquillian.core.impl.EventContextImpl.invokeObservers(EventContextImpl.java:103)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:85)
	at org.jboss.arquillian.container.test.impl.client.ContainerEventController.createContext(ContainerEventController.java:142)
	at org.jboss.arquillian.container.test.impl.client.ContainerEventController.createTestContext(ContainerEventController.java:129)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:92)
	at org.jboss.arquillian.test.impl.TestContextHandler.createTestContext(TestContextHandler.java:130)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:92)
	at org.jboss.arquillian.test.impl.TestContextHandler.createClassContext(TestContextHandler.java:92)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:92)
	at org.jboss.arquillian.test.impl.TestContextHandler.createSuiteContext(TestContextHandler.java:73)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at org.jboss.arquillian.core.impl.ObserverImpl.invoke(ObserverImpl.java:96)
	at org.jboss.arquillian.core.impl.EventContextImpl.proceed(EventContextImpl.java:92)
	at org.jboss.arquillian.core.impl.ManagerImpl.fire(ManagerImpl.java:143)
	at org.jboss.arquillian.test.impl.EventTestRunnerAdaptor.test(EventTestRunnerAdaptor.java:136)
	at org.jboss.arquillian.testng.Arquillian.run(Arquillian.java:164)
	at org.testng.internal.MethodInvocationHelper.invokeHookable(MethodInvocationHelper.java:208)
	at org.testng.internal.Invoker.invokeMethod(Invoker.java:635)
	at org.testng.internal.Invoker.invokeTestMethod(Invoker.java:816)
	at org.testng.internal.Invoker.invokeTestMethods(Invoker.java:1124)
	at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:125)
	at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:108)
	at org.testng.TestRunner.privateRun(TestRunner.java:774)
	at org.testng.TestRunner.run(TestRunner.java:624)
	at org.testng.SuiteRunner.runTest(SuiteRunner.java:359)
	at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:354)
	at org.testng.SuiteRunner.privateRun(SuiteRunner.java:312)
	at org.testng.SuiteRunner.run(SuiteRunner.java:261)
	at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:52)
	at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:86)
	at org.testng.TestNG.runSuitesSequentially(TestNG.java:1215)
	at org.testng.TestNG.runSuitesLocally(TestNG.java:1140)
	at org.testng.TestNG.run(TestNG.java:1048)
	at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:281)
	at org.apache.maven.surefire.testng.TestNGXmlTestSuite.execute(TestNGXmlTestSuite.java:75)
	at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:121)
	at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:290)
	at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:242)
	at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:121)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalStateException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConfigSourceProvider -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest@1794d431]" name="arquillianAfterTest" is-config="true" duration-ms="2" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest.testConfigSourceProvider()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest@1794d431]" name="arquillianAfterClass" is-config="true" duration-ms="5" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
      </class> <!-- org.eclipse.microprofile.config.tck.AutoDiscoveredConfigSourceTest -->
      <class name="org.eclipse.microprofile.config.tck.CustomConfigSourceTest">
        <test-method status="FAIL" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.CustomConfigSourceTest@42e26948]" name="arquillianBeforeClass" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <exception class="org.jboss.weld.exceptions.DeploymentException">
            <message>
              <![CDATA[WELD-001408: Unsatisfied dependencies for type Config with qualifiers @Default
  at injection point [BackedAnnotatedField] @Inject private org.eclipse.microprofile.config.tck.CustomConfigSourceTest.config
  at org.eclipse.microprofile.config.tck.CustomConfigSourceTest.config(CustomConfigSourceTest.java:0)
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.jboss.weld.exceptions.DeploymentException: WELD-001408: Unsatisfied dependencies for type Config with qualifiers @Default
  at injection point [BackedAnnotatedField] @Inject private org.eclipse.microprofile.config.tck.CustomConfigSourceTest.config
  at org.eclipse.microprofile.config.tck.CustomConfigSourceTest.config(CustomConfigSourceTest.java:0)

	at org.jboss.weld.bootstrap.Validator.validateInjectionPointForDeploymentProblems(Validator.java:355)
	at org.jboss.weld.bootstrap.Validator.validateInjectionPoint(Validator.java:277)
	at org.jboss.weld.bootstrap.Validator.validateGeneralBean(Validator.java:130)
	at org.jboss.weld.bootstrap.Validator.validateRIBean(Validator.java:151)
	at org.jboss.weld.bootstrap.Validator.validateBean(Validator.java:494)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:64)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:55)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- org.jboss.weld.exceptions.DeploymentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.CustomConfigSourceTest@42e26948]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.CustomConfigSourceTest@42e26948]" name="arquillianAfterClass" is-config="true" duration-ms="8" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.CustomConfigSourceTest@42e26948]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.CustomConfigSourceTest.testConfigSourceProvider()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testConfigSourceProvider()[pri:0, instance:org.eclipse.microprofile.config.tck.CustomConfigSourceTest@42e26948]" name="testConfigSourceProvider" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConfigSourceProvider -->
      </class> <!-- org.eclipse.microprofile.config.tck.CustomConfigSourceTest -->
      <class name="org.eclipse.microprofile.config.tck.ConfigProviderTest">
        <test-method status="PASS" signature="arquillianBeforeSuite()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeSuite" is-config="true" duration-ms="583" started-at="2017-04-13T12:42:28Z" finished-at="2017-04-13T12:42:28Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeSuite -->
        <test-method status="FAIL" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeClass" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:28Z" finished-at="2017-04-13T12:42:28Z">
          <exception class="org.jboss.weld.exceptions.DeploymentException">
            <message>
              <![CDATA[WELD-001408: Unsatisfied dependencies for type Config with qualifiers @Default
  at injection point [BackedAnnotatedField] @Inject private org.eclipse.microprofile.config.tck.ConfigProviderTest.config
  at org.eclipse.microprofile.config.tck.ConfigProviderTest.config(ConfigProviderTest.java:0)
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.jboss.weld.exceptions.DeploymentException: WELD-001408: Unsatisfied dependencies for type Config with qualifiers @Default
  at injection point [BackedAnnotatedField] @Inject private org.eclipse.microprofile.config.tck.ConfigProviderTest.config
  at org.eclipse.microprofile.config.tck.ConfigProviderTest.config(ConfigProviderTest.java:0)

	at org.jboss.weld.bootstrap.Validator.validateInjectionPointForDeploymentProblems(Validator.java:355)
	at org.jboss.weld.bootstrap.Validator.validateInjectionPoint(Validator.java:277)
	at org.jboss.weld.bootstrap.Validator.validateGeneralBean(Validator.java:130)
	at org.jboss.weld.bootstrap.Validator.validateRIBean(Validator.java:151)
	at org.jboss.weld.bootstrap.Validator.validateBean(Validator.java:494)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:64)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:55)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- org.jboss.weld.exceptions.DeploymentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testDynamicValueInPropertyConfigSource()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testDynamicValueInPropertyConfigSource" duration-ms="1" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDynamicValueInPropertyConfigSource -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="1" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testDynamicValueInPropertyConfigSource()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testEmptyConfigTreatedAsNotExisting()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testEmptyConfigTreatedAsNotExisting" duration-ms="1" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyConfigTreatedAsNotExisting -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testEmptyConfigTreatedAsNotExisting()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testEmptyConfigTreatedAsNotExistingGet()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testEmptyConfigTreatedAsNotExistingGet" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEmptyConfigTreatedAsNotExistingGet -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="1" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testEmptyConfigTreatedAsNotExistingGet()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testEnvironmentConfigSource()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testEnvironmentConfigSource" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testEnvironmentConfigSource -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testEnvironmentConfigSource()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testGetConfigSources()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testGetConfigSources()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testGetConfigSources" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConfigSources -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testJavaConfigPropertyFilesConfigSource()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testJavaConfigPropertyFilesConfigSource" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testJavaConfigPropertyFilesConfigSource -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testJavaConfigPropertyFilesConfigSource()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testNonExistingConfigKey()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testNonExistingConfigKey()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testNonExistingConfigKey" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonExistingConfigKey -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="1" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testNonExistingConfigKeyGet()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testNonExistingConfigKeyGet()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testNonExistingConfigKeyGet" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNonExistingConfigKeyGet -->
        <test-method status="SKIP" signature="testPropertyConfigSource()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="testPropertyConfigSource" duration-ms="1" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testPropertyConfigSource -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterClass" is-config="true" duration-ms="66" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:29Z" finished-at="2017-04-13T12:42:29Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConfigProviderTest.testPropertyConfigSource()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterSuite()[pri:0, instance:org.eclipse.microprofile.config.tck.ConfigProviderTest@6093dd95]" name="arquillianAfterSuite" is-config="true" duration-ms="3" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterSuite -->
      </class> <!-- org.eclipse.microprofile.config.tck.ConfigProviderTest -->
      <class name="org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest">
        <test-method status="PASS" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest@7d9d1a19]" name="arquillianBeforeClass" is-config="true" duration-ms="55" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="PASS" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest@7d9d1a19]" name="arquillianBeforeTest" is-config="true" duration-ms="5" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest.test()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest@7d9d1a19]" name="test" duration-ms="7" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest@7d9d1a19]" name="arquillianAfterTest" is-config="true" duration-ms="3" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest.test()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest@7d9d1a19]" name="arquillianAfterClass" is-config="true" duration-ms="9" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
      </class> <!-- org.eclipse.microprofile.config.tck.broken.MissingValueOnInstanceInjectionTest -->
      <class name="org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest">
        <test-method status="PASS" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest@4883b407]" name="arquillianBeforeClass" is-config="true" duration-ms="68" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="PASS" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest@4883b407]" name="arquillianBeforeTest" is-config="true" duration-ms="4" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest.test()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest@4883b407]" name="test" duration-ms="3" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest@4883b407]" name="arquillianAfterTest" is-config="true" duration-ms="20" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest.test()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest@4883b407]" name="arquillianAfterClass" is-config="true" duration-ms="10" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
      </class> <!-- org.eclipse.microprofile.config.tck.broken.MissingConverterOnInstanceInjectionTest -->
      <class name="org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest">
        <test-method status="PASS" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest@5622fdf]" name="arquillianBeforeClass" is-config="true" duration-ms="80" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="PASS" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest@5622fdf]" name="arquillianBeforeTest" is-config="true" duration-ms="16" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest.test()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="test()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest@5622fdf]" name="test" duration-ms="9" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- test -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest@5622fdf]" name="arquillianAfterTest" is-config="true" duration-ms="10" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest.test()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest@5622fdf]" name="arquillianAfterClass" is-config="true" duration-ms="7" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
      </class> <!-- org.eclipse.microprofile.config.tck.broken.WrongConverterOnInstanceInjectionTest -->
      <class name="org.eclipse.microprofile.config.tck.ConverterTest">
        <test-method status="FAIL" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeClass" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <exception class="org.jboss.weld.exceptions.DeploymentException">
            <message>
              <![CDATA[WELD-001408: Unsatisfied dependencies for type Config with qualifiers @Default
  at injection point [BackedAnnotatedField] @Inject private org.eclipse.microprofile.config.tck.ConverterTest.config
  at org.eclipse.microprofile.config.tck.ConverterTest.config(ConverterTest.java:0)
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.jboss.weld.exceptions.DeploymentException: WELD-001408: Unsatisfied dependencies for type Config with qualifiers @Default
  at injection point [BackedAnnotatedField] @Inject private org.eclipse.microprofile.config.tck.ConverterTest.config
  at org.eclipse.microprofile.config.tck.ConverterTest.config(ConverterTest.java:0)

	at org.jboss.weld.bootstrap.Validator.validateInjectionPointForDeploymentProblems(Validator.java:355)
	at org.jboss.weld.bootstrap.Validator.validateInjectionPoint(Validator.java:277)
	at org.jboss.weld.bootstrap.Validator.validateGeneralBean(Validator.java:130)
	at org.jboss.weld.bootstrap.Validator.validateRIBean(Validator.java:151)
	at org.jboss.weld.bootstrap.Validator.validateBean(Validator.java:494)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:64)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:55)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- org.jboss.weld.exceptions.DeploymentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testBoolean()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testBoolean" duration-ms="1" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testBoolean -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="1" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testBoolean()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testDouble()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testDouble()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testDouble" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDouble -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testDouble_Broken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testDouble_Broken()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testDouble_Broken" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDouble_Broken -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testDuration_Broken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testDuration_Broken()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testDuration_Broken" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuration_Broken -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testDuration()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testDuration()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testDuration" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDuration -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testFloat()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testFloat" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloat -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testFloat_Broken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testFloat()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testFloat_Broken()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testFloat_Broken" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFloat_Broken -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testInteger_Broken()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testInteger_Broken" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInteger_Broken -->
        <test-method status="SKIP" signature="testInteger()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testInteger" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInteger -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testInteger()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testInteger_Broken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testLocalDateTime()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testLocalDateTime" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLocalDateTime -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testLocalDate()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testLocalDate()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testLocalDate" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLocalDate -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testLocalDateTime()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testLocalDateTime_Broken()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testLocalDateTime_Broken" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLocalDateTime_Broken -->
        <test-method status="SKIP" signature="testLocalDate_Broken()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testLocalDate_Broken" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLocalDate_Broken -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testLocalDateTime_Broken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testLocalDate_Broken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testLocalTime_Broken()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testLocalTime_Broken" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLocalTime_Broken -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testLocalTime()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testLocalTime()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testLocalTime" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLocalTime -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="SKIP" signature="testLong()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testLong" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLong -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testLocalTime_Broken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="1" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testLong()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testLong_Broken()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="testLong_Broken" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testLong_Broken -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.ConverterTest.testLong_Broken()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.ConverterTest@39c0f4a]" name="arquillianAfterClass" is-config="true" duration-ms="5" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
      </class> <!-- org.eclipse.microprofile.config.tck.ConverterTest -->
      <class name="org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest">
        <test-method status="FAIL" signature="arquillianBeforeClass()[pri:0, instance:org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest@343f4d3d]" name="arquillianBeforeClass" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <exception class="org.jboss.weld.exceptions.DeploymentException">
            <message>
              <![CDATA[WELD-001408: Unsatisfied dependencies for type Optional<Integer> with qualifiers @ConfigProperty
  at injection point [BackedAnnotatedField] @Inject @ConfigProperty private org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest$OptionalValuesBean.notexistingProperty
  at org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest$OptionalValuesBean.notexistingProperty(OptionalValuesBean.java:0)
]]>
            </message>
            <full-stacktrace>
              <![CDATA[org.jboss.weld.exceptions.DeploymentException: WELD-001408: Unsatisfied dependencies for type Optional<Integer> with qualifiers @ConfigProperty
  at injection point [BackedAnnotatedField] @Inject @ConfigProperty private org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest$OptionalValuesBean.notexistingProperty
  at org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest$OptionalValuesBean.notexistingProperty(OptionalValuesBean.java:0)

	at org.jboss.weld.bootstrap.Validator.validateInjectionPointForDeploymentProblems(Validator.java:355)
	at org.jboss.weld.bootstrap.Validator.validateInjectionPoint(Validator.java:277)
	at org.jboss.weld.bootstrap.Validator.validateGeneralBean(Validator.java:130)
	at org.jboss.weld.bootstrap.Validator.validateRIBean(Validator.java:151)
	at org.jboss.weld.bootstrap.Validator.validateBean(Validator.java:494)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:64)
	at org.jboss.weld.bootstrap.ConcurrentValidator$1.doWork(ConcurrentValidator.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:62)
	at org.jboss.weld.executor.IterativeWorkerTaskFactory$1.call(IterativeWorkerTaskFactory.java:55)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1142)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:617)
	at java.lang.Thread.run(Thread.java:745)
]]>
            </full-stacktrace>
          </exception> <!-- org.jboss.weld.exceptions.DeploymentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeClass -->
        <test-method status="SKIP" signature="arquillianBeforeTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest@343f4d3d]" name="arquillianBeforeTest" is-config="true" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianBeforeTest -->
        <test-method status="PASS" signature="arquillianAfterTest(java.lang.reflect.Method)[pri:0, instance:org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest@343f4d3d]" name="arquillianAfterTest" is-config="true" duration-ms="1" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <params>
            <param index="0">
              <value>
                <![CDATA[public void org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest.testOptionalInjection()]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterTest -->
        <test-method status="SKIP" signature="testOptionalInjection()[pri:0, instance:org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest@343f4d3d]" name="testOptionalInjection" duration-ms="0" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testOptionalInjection -->
        <test-method status="PASS" signature="arquillianAfterClass()[pri:0, instance:org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest@343f4d3d]" name="arquillianAfterClass" is-config="true" duration-ms="6" started-at="2017-04-13T12:42:30Z" finished-at="2017-04-13T12:42:30Z">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- arquillianAfterClass -->
      </class> <!-- org.eclipse.microprofile.config.tck.CdiOptionalInjectionTest -->
    </test> <!-- microprofile-config 1.0 TCK -->
  </suite> <!-- microprofile-config-TCK -->
</testng-results>
